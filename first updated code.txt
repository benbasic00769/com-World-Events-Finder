// Assigning searchList variable to the previous-searches id within the html, this is where the list items will populate
let searchList = $("#previous-searches");
// // Assigning recommendedList variable to the recommended-areas id within the html, this is where the pre-defined list items will populate
let recommendedList = $("#recommended-areas");
// Assigning searchStorage the value of whats currently stored in pastSearches local storage if it currently exists
let searchStorage = JSON.parse(localStorage.getItem("pastSearches"));

// If statement checking if local storage = null, if it is then it assigns a null value to the pastSearches localStorage
if (localStorage.getItem("pastSearches") === null) {
  localStorage.setItem("pastSearches", JSON.stringify([]));
}

// Assigning the apiKey variable to the API Key needed to access the data set
let apiKey = "gPYdcAZ3x7dA2mYoq34XovsV4rz8IFvd";
// Assigning querySize to the amount of events we want to pull from a page in the data set (currently the maximum value for the api is 1000 per page)
let querySize = "200";

const mapBoxKey =
  "pk.eyJ1Ijoienp6YmlhIiwiYSI6ImNsM3ZubXB0djJuc2UzZGw4NHBscnltb3IifQ.DW29ynZDDnPeH6hmtl8O8g"; // set the access token
mapboxgl.accessToken = mapBoxKey;
// the Init Lang & Lat are the Starting GIS coordinates for Toronto
const initLng = -79.347015;
const initLat = 43.65107;

const map = new mapboxgl.Map({
  container: "map", // The container ID
  style: "mapbox://styles/zzzbia/cl3yk4t1e000h15s3i77cogqd", // The map style to use
  center: [initLng, initLat], // Starting position [lng, lat]
  zoom: 12, // Starting zoom level
});

// Function which grabs data from the ticket master api
function getData() {
  // Accessing data from the api with the dmaID of the Toronto area, using the apiKey, the page size of the querySize, and sorting by ascending date
  let ticketMasterURL =
    "https://app.ticketmaster.com/discovery/v2/events.json?dmaId=527&apikey=" +
    apiKey +
    "&size=" +
    querySize +
    "&sort=date,asc";
  fetch(ticketMasterURL, {
    method: "GET",
  })
    .then((response) => {
      // Returns json object for reference
      return response.json();
    })
    .then((data) => {
      let events = [];
      // console.log(data);
      // Variable for the current date
      let currentDate = moment().format("YYYY-MM-DD");
      // Variable for the start date for the dateCheck, days is subtracted by 1 so that the starting range can be checked for the current date
      let startWeekDate = moment().subtract(1, "days").format("YYYY-MM-DD");
      // Variable for the end date for the dateCheck, days is added by 8 so that the end of the range checked is for a full week
      let endWeekDate = moment().add(8, "days").format("YYYY-MM-DD");

      // Assigning eventData to the value of the events data set
      let eventData = data._embedded.events;

      // For loop to increment through the events data array
      for (let i = 0; i < eventData.length; i++) {
        // Assigning dateData to the value of the localDate data set so that it can grab the starting date of the event
        let dateData = eventData[i].dates.start.localDate;

        // Function to check if the events in the data set are within 7 days of the current date
        function checkBetween(date1, date2, date3) {
          return moment(date1).isBetween(date2, date3);
        }

        // Assigning dateCheck to have a value of either true or false depending on if the event is within a 7 day range of the current date
        let dateCheck = checkBetween(dateData, startWeekDate, endWeekDate);

        // Assigning cancelledCheck to the value of the status in the data set, this is used in the following if statement to see if tickets are on sale for the event
        let cancelledCheck = eventData[i].dates.status.code;

        // If statement to check if dateCheck is true, and if cancelledCheck is equal to onsale
        if (dateCheck && cancelledCheck === "onsale") {
          // Ensure that _embedded and venues exist before trying to access them
          if (
            eventData[i]._embedded &&
            eventData[i]._embedded.venues &&
            eventData[i]._embedded.venues[0] &&
            eventData[i]._embedded.venues[0].location
          ) {
            // Assigning latData to the value of the events data set latitude
            let latData = eventData[i]._embedded.venues[0].location.latitude;
            // Assigning lonData to the value of the events data set longitude
            let lonData = eventData[i]._embedded.venues[0].location.longitude;
            // Assigning eventTitleData to the value of the events data set of the events title
            let eventTitleData = eventData[i].name;
            // Assigning eventURL to the value of the events data set url so that it gets the url where the user can buy a ticket
            let eventURL = eventData[i].url;
            // Assigning venueNameData to the value of the events data set venue name
            let venueNameData = eventData[i]._embedded.venues[0].name;
            // Assigning  featureImage to the value of events data image from the url of where the user can buy a ticket
            let featureImage = eventData[i].images[0].url;
            // Starting day of the event
            let eventStartDay = eventData[i].dates.start.localDate;
            // Starting Time of the event
            let eventStartTime = eventData[i].dates.start.localTime;
            console.log(dateCheck);
            if (
              latData &&
              lonData &&
              eventTitleData &&
              eventURL &&
              venueNameData
            ) {
              events.push({
                lat: latData,
                lon: lonData,
                title: eventTitleData,
                url: eventURL,
                venueNameData: venueNameData,
                featureImage: featureImage,
                eventStartDay: eventStartDay,
                eventStartTime: eventStartTime,
              });
              // console.log(events);
            }
          }
        }
      }
      if (events.length) {
        startMapBox(events);
      } else {
        alert("No events found in your area");
      }
    })
    .catch((e) => {
      console.error(e);
    });
}

const startMapBox = async (events) => {
  // console.log("startmapbox", events);
  const map = new mapboxgl.Map({
    container: "map", // The container ID
    style: "mapbox://styles/zzzbia/cl3yk4t1e000h15s3i77cogqd", // The map style to use
    center: [initLng, initLat], // Starting position [lng, lat]
    zoom: 12, // Starting zoom level
  });

  recommendedAreas = [
    {
      address: "Scotiabank Arena",
      lon: -79.3791035,
      lat: 43.6433895,
    },
    {
      address: "Ontario Place",
      lon: -79.41511374999999,
      lat: 43.62939075,
    },
    {
      address: "Danforth Music Hall",
      lon: -79.357071,
      lat: 43.676338,
    },
  ];
  // Function which displays recommended areas in a list for the user to click on and center the map to that location
  function recommendedSearches() {
    // If statement checking if recommendedAreas already has any value
    if (recommendedAreas !== null) {
      // For loop which will increment through the recommendedAreas array to find each item
      for (let i = 0; i < recommendedAreas.length; i++) {
        // Assigning recommendedListItem a JQuery with a data value object with the properties for address, longitude, and latitude for each item in the recommendedAreas array
        let recommendedListItem = $("<h2>").data({
          address: recommendedAreas[i].address,
          lon: recommendedAreas[i].lon,
          lat: recommendedAreas[i].lat,
        });

        recommendedListItem.addClass(
          "text-xl cursor-pointer font-semibold mb-2"
        );
        // Assigning the text of each recommendedListItem the address property
        recommendedListItem.text(recommendedAreas[i].address);

        // Creating an event listener which listens for a click event on the recommendedListItem
        recommendedListItem.on("click", function () {
          // Assigning thisLat to the latitude of the item clicked
          let thisLat = $(this).data("lat");
          // Assigning thisLon to the longitude of the item clicked
          let thisLon = $(this).data("lon");

          // Function which pans and zooms to the selected location based on the longitude and latitude from the click event
          map.flyTo({
            center: [thisLon, thisLat],
            essential: true,
            zoom: 15,
          });
        });

        recommendedList.append(recommendedListItem);
      }
    }
  }

  recommendedSearches();

  function addSearchToList(searches) {
    searchList.empty();
    searches.map((search) => {
      let searchItem = $("<li>");
      searchItem.text(search);
      searchItem.addClass("search-item");
      searchItem.on("click", function () {
        let searchItemText = $(this).text();
        $("#search-bar").val(searchItemText);
        performSearch(searchItemText);
      });
      searchList.append(searchItem);
    });
  }

  function addSearchToStorage(search) {
    let searches = JSON.parse(localStorage.getItem("pastSearches")) || [];
    if (!searches.includes(search)) {
      searches.push(search);
      localStorage.setItem("pastSearches", JSON.stringify(searches));
      addSearchToList(searches);
    }
  }

  function performSearch(query) {
    let filteredEvents = events.filter((event) =>
      event.title.toLowerCase().includes(query.toLowerCase())
    );
    displayMarkers(filteredEvents);
  }

  function displayMarkers(events) {
    events.forEach((event) => {
      new mapboxgl.Marker()
        .setLngLat([event.lon, event.lat])
        .setPopup(
          new mapboxgl.Popup().setHTML(
            `<h3>${event.title}</h3><p>${event.venueNameData}</p><img src="${event.featureImage}" alt="${event.title}" style="width:100%;height:auto;"><p>Event Start Day: ${event.eventStartDay}</p><p>Event Start Time: ${event.eventStartTime}</p><a href="${event.url}" target="_blank">Buy Tickets</a>`
          )
        )
        .addTo(map);
    });
  }

  $("#search-bar").on("keypress", function (e) {
    if (e.which == 13) {
      let query = $(this).val();
      performSearch(query);
      addSearchToStorage(query);
    }
  });

  addSearchToList(searchStorage);
  displayMarkers(events);
};

$(document).ready(function () {
  getData();
});
